{"version":3,"sources":["hooks/grid.ts","grid.tsx","App.tsx","hooks/timing.ts","serviceWorker.ts","index.tsx"],"names":["hash","coordinate","String","getNeighborsByCoord","dict","neighborsPositions","neighbors","coordinateString","forEach","shift","neighbor","shiftCoordinate","split","map","Number","useGrid","coordinates","useState","Object","fromEntries","gridState","setGridState","getNextGridState","useCallback","neighborsByCord","nextState","getNextState","Point","color","style","height","margin","width","borderRadius","border","backgroundColor","Grid","props","Array","dimensions","fill","undefined","_","key","__","points","App","gameTicker","setGameTicker","speed","setSpeed","useEffect","setTimeout","useTiming","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.588946ed.chunk.js","sourcesContent":["import { useState, useCallback } from \"react\";\n\ntype Coord = [number, number];\ntype CoordDict<T> = { [coordinate: string]: T };\nconst hash = (coordinate: Coord) => String(coordinate);\n\nconst unHash = (coordinate: string): Coord =>\n  coordinate.split(\",\").map(Number) as Coord;\n\nconst shiftCoordinate = (coordinate: Coord, shift: Coord): Coord => [\n  coordinate[0] + shift[0],\n  coordinate[1] + shift[1],\n];\n\nexport const coordsToDict = (coordinates: Coord[]): CoordDict<boolean> =>\n  Object.fromEntries(coordinates.map((coordinate) => [hash(coordinate), true]));\n\n// refactor into something less smelly\nexport const getNeighborsByCoord = (dict: CoordDict<boolean>) => {\n  const neighborsPositions: Coord[] = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n  ];\n  const neighbors: CoordDict<number> = {};\n  for (const coordinateString in dict) {\n    neighborsPositions.forEach((shift) => {\n      const neighbor = hash(shiftCoordinate(unHash(coordinateString), shift));\n      neighbors[neighbor] = neighbors[neighbor]\n        ? (neighbors[neighbor] += 1)\n        : 1;\n    });\n  }\n  return neighbors;\n};\n\nexport const getNextState = (dict: CoordDict<boolean>) => {\n  const neighborsByCord = getNeighborsByCoord(dict);\n\n  const nextState: CoordDict<boolean> = {};\n  // const maxCoordsDist = [\n  //   [0, 0],\n  //   [0, 0],\n  // ];\n  for (const coordinateString in neighborsByCord) {\n    const neighbors = neighborsByCord[coordinateString];\n    if (dict[coordinateString] && neighbors === 2) {\n      // const coordinate = unHash(coordinateString);\n\n      // if (coordinate[0] > maxCoordsDist[0][0]) {\n      //   maxCoordsDist[0][0] = coordinate[0];\n      // }\n      // if (coordinate[0] < maxCoordsDist[1][0]) {\n      //   maxCoordsDist[1][0] = coordinate[0];\n      // }\n      // if (coordinate[1] > maxCoordsDist[0][1]) {\n      //   maxCoordsDist[0][1] = coordinate[1];\n      // }\n      // if (coordinate[1] < maxCoordsDist[1][1]) {\n      //   maxCoordsDist[1][1] = coordinate[1];\n      // }\n\n      nextState[coordinateString] = true;\n    } else if (neighbors === 3) {\n      nextState[coordinateString] = true;\n    }\n  }\n  // console.log(maxCoordsDist);\n  return nextState;\n};\n\nexport const useGrid = () => {\n  const [gridState, setGridState] = useState(\n    coordsToDict([\n      [2, 2],\n      [2, 3],\n      [2, 4],\n\n      [3, 1],\n      [3, 2],\n      [3, 3],\n    ])\n  );\n\n  const getNextGridState = useCallback(\n    () => setGridState(getNextState(gridState)),\n    [gridState]\n  );\n\n  return {\n    gridState,\n    getNextGridState,\n  };\n};\n","import React from \"react\";\n\nconst Point: React.FC<{ color?: boolean }> = ({ color }) => {\n  return (\n    <td\n      style={{\n        height: \"25px\",\n        margin: 5,\n        width: \"25px\",\n        borderRadius: \"6px\",\n        border: \"1px solid rgba(255, 255, 255, 0.26)\",\n        backgroundColor: color ? \"black\" : \"white\",\n      }}\n    ></td>\n  );\n};\n\nexport const Grid: React.FC<{\n  dimensions: [number, number];\n  points: { [posYPosX: string]: boolean };\n}> = (props) => (\n  <table>\n    <tbody>\n      {new Array(props.dimensions[0]).fill(undefined).map((_, height) => (\n        <tr key={`board-row-${height}`}>\n          {new Array(props.dimensions[1]).fill(undefined).map((__, width) => (\n            <Point\n              key={`board-row-${height}-pos-${width}`}\n              color={props.points[String([height, width])]}\n            />\n          ))}\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useGrid } from \"./hooks/grid\";\nimport { useTiming } from \"./hooks/timing\";\nimport { Grid } from \"./grid\";\nfunction App() {\n  const { gridState, getNextGridState } = useGrid();\n  useTiming(getNextGridState);\n  return (\n    <div className=\"App\">\n      <Grid dimensions={[6, 6]} points={gridState} />\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from \"react\";\n\nexport const useTiming = (getNextState: () => void) => {\n  const [gameTicker, setGameTicker] = useState(0);\n  const [speed, setSpeed] = useState(20);\n\n  useEffect(() => {\n    setTimeout(() => setGameTicker(gameTicker + 1), 10);\n  }, [gameTicker]);\n\n  useEffect(() => {\n    if (!(gameTicker % speed)) {\n      getNextState();\n    }\n  }, [gameTicker, speed]);\n\n  return {\n    speed,\n    setSpeed,\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}